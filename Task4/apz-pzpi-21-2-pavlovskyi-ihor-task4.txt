1	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою цієї роботи є створення користувацького інтерфейсу для системи, яка керує доглядом за теплицями та домашніми мікрофермами. Основні завдання включають вибір та інтеграцію компонентів інтерфейсу, розробку необхідної програмної архітектури та забезпечення безперебійної взаємодії з іншими частинами системи. Робота також передбачає аналіз найкращих рішень щодо користувацького досвіду та створення діаграм для візуалізації структури та взаємодії всередині інтерфейсу. Кінцевим результатом має стати інтуїтивно зрозуміла та ефективна система, яка автоматизує догляд за теплицями та мікрофермами.


1.2	Моделювання програмної системи


Щоб дослідити можливості frontend-системи, була розроблена діаграма прецедентів UML (див. A.1), яка окреслює ключові аспекти її функціональності, підкреслюючи її здатність керувати взаємодією користувачів та даними, пов'язаними з доглядом за теплицями. Діаграма ілюструє різні функції: від перегляду та видалення повідомлень, отриманих від пристроїв Інтернету речей, до управління теплицями, датчиками та розкладом, а також редагування інформації про обліковий запис користувача.
Розглянемо повний цикл роботи системи, який включає як основні, так і додаткові функції:
−	При першому використанні системи користувач повинен зареєструватися  та увійти в систему і отримати доступ до свого облікового запису.
−	На спеціальній сторінці користувач може переглянути всі повідомлення від IoT-пристроїв. Ці повідомлення можуть бути видалені за необхідності для підтримки організованого інтерфейсу.
−	Користувач може отримати доступ до списку всіх теплиць, з можливістю додавання нових теплиць, редагування існуючих або видалення тих, що більше не використовуються.
−	Для кожної вибраної теплиці користувач може переглянути всі пов'язані з нею датчики, додати нові датчики, відредагувати інформацію про датчики або видалити датчики.
−	Кожен датчик має графік зчитування даних. Користувач може переглядати, створювати, редагувати або видаляти ці графіки, щоб забезпечити оптимальний моніторинг і контроль умов у теплиці.
Протягом усього процесу взаємодія користувача з системою є інтуїтивно зрозумілою, що дозволяє безперешкодно здійснювати навігацію та керувати всіма аспектами, пов'язаними з даними теплиці та датчиків.
Ця послідовність візуально представлена на діаграмах станів (див. А.2) діяльності (див. A.4), що демонструють впорядкований робочий процес і зручний інтерфейс інтерфейсу системи. Цей цикл продовжує підтримувати ефективне управління теплицею, поки користувач не вийде з системи або поки система не буде деактивована.


2	ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1	Архітектура системи


Система була розроблена з використанням фреймворку React в рамках компонентної архітектури. 
Для зв'язку з базою даних за допомогою бекенд-методів було використано PostgreSQL. Така інтеграція з базою даних забезпечує ефективне управління та пошук даних, що є важливим для функціональності системи.
Використання React забезпечує чуйний і динамічний користувальницький інтерфейс, а компонентна архітектура сприяє чіткому поділу завдань, підвищуючи легкість обслуговування і масштабованість коду.
Поєднання існуючого бекенду з React-додатком забезпечує надійне середовище розробки, яке сприяє ефективному кодуванню, налагодженню та розгортанню процесів. Таке налаштування має вирішальне значення для забезпечення безперебійного та надійного користувацького досвіду в управлінні системою догляду за теплицями та мікрофермами.


2.2	Програмна розробка системи


Перед початком процесу розробки ми накреслили комплексну архітектурну схему (див. A.5), щоб проілюструвати фізичні та логічні компоненти системи.
Основна програма використовує декілька бібліотек та залежностей, перелічених нижче:
react: Для побудови користувацького інтерфейсу та керування станами компонентів.
−	react-intl: Для інтернаціоналізації та локалізації текстового вмісту.
−	react-router-dom: Для навігації та маршрутизації всередині програми.
−	local-storage: Для зберігання та отримання даних користувача.
−	context: Для управління глобальним станом та забезпечення контексту у всьому додатку.
Основні сторінки, до яких має доступ користувач:
Файл GreenhousesPage.jsx реалізує інтерфейс для управління теплицями. Він з'єднується з бекендом через API-сервіси і виконує різні операції, зокрема:
−	отримує список теплиць, пов'язаних з користувачем, що увійшов в систему.
−	дозволяє додавати, редагувати, видаляти та переглядати датчики теплиць.
−	керує та відображає повідомлення про помилки, пов'язані з отриманням даних та операціями.
Файл NotificationsPage.jsx зосереджений на управлінні сповіщеннями користувача. Він включає такі функції, як:
−	отримує сповіщення для користувача з бекенду.
−	керує помилками під час отримання даних і відображає відповідні повідомлення.
−	дозволяє користувачам видаляти сповіщення та відповідно оновлює інтерфейс користувача.
Файл SensorsPage.jsx відповідає за управління датчиками в теплиці. Основні функції включають:
−	отримує список датчиків для конкретної теплиці.
−	надає можливість додавати, редагувати, видаляти та переглядати графіки роботи датчиків.
−	реалізує сортування за різними атрибутами датчиків для покращення роботи користувача.
Файл UserAccountPage.jsx керує даними облікового запису користувача і надає такі функції, як:
−	дозволяє користувачам переглядати та редагувати дані свого облікового запису.
−	обробляє вихід користувача з системи та оновлює інформацію про користувача у локальному сховищі.
−	керування та відображення помилок, пов'язаних з оновленням даних користувача.
Також проект містить провайдери контексту для керування глобальним станом:
−	AuthContext: Керує станом автентифікації користувача, зокрема функціями входу і виходу з системи.
−	LanguageContext: Керує мовними налаштуваннями програми та надає методи для зміни мови.
Папка models визначає моделі даних, що використовуються в додатку, забезпечуючи узгодженість структур даних і перевірку типів.
Папка services містить службові файли API, такі як GreenhouseService.js, NotificationService.js, SensorService.js та інші, які обробляють HTTP-запити до бекенду для виконання CRUD-операцій.
Папка styles містить файли CSS, які використовуються для стилізації різних компонентів і сторінок, забезпечуючи послідовний і візуально привабливий користувацький інтерфейс.
Загалом, така модульна структура та чіткий розподіл завдань полегшує обслуговування, масштабування та ефективну розробку фронтенд-системи.


2.3	Висновки


Виконавши лабораторну, я успішно розробив клієнтську частину для системи моніторингу теплиць, зосередившись на автентифікації користувачів, динамічній обробці даних та інтернаціоналізації. Модульна структура, зручна навігація та послідовний стиль забезпечили зручність та простоту використання програми. Серед ключових досягнень - безпечне управління користувачами, оновлення даних у реальному часі та комплексна обробка помилок. Це надало цінний досвід у розробці React, інтеграції API та дизайні користувацького досвіду, заклавши міцний фундамент для майбутніх удосконалень, таких як розширена аналітика та мобільна адаптивність.