1	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою цього проекту є розробка мобільного додатку, призначеного для управління доглядом за теплицями та домашніми мікрофермами. Основні заходи включають вибір і включення зручних для користувача компонентів, розробку надійної програмної архітектури та забезпечення безперешкодної інтеграції з ширшою системою. Крім того, проект зосереджується на оцінці оптимальних практик взаємодії з користувачем і створенні діаграм, що ілюструють структуру інтерфейсу та взаємодію. Кінцевий продукт має стати інтуїтивно зрозумілим та ефективним інструментом для автоматизації обслуговування теплиць та мікроферм.


1.2	Моделювання програмної системи


Щоб продемонструвати функціональність мобільного додатку, було створено діаграму варіантів використання UML (див. A.1), яка висвітлює його ключові функції, зосереджуючись на управлінні взаємодією користувачів та даними, пов'язаними з обслуговуванням теплиць. Додаток надає достатній набір функцій, розроблених для покращення досвіду користувача.
Користувачеві доступні наступні функції:
−	Користувач може зареєструвати новий обліковий запис, надавши необхідну особисту інформацію для створення профілю;
−	Користувач може увійти в додаток для доступу до свого облікового запису за допомогою захищеного механізму логіну та паролю;
−	Користувач може переглядати всі сповіщення від IoT-пристроїв на спеціальній сторінці сповіщень, гарантуючи, що він буде в курсі оновлень та попереджень в режимі реального часу;
−	Користувачеві доступний повний список теплиць;
−	Користувач може переглядати всі датчики, що дозволяє здійснювати детальний моніторинг умов навколишнього середовища.
Взаємодія користувача з додатком розроблена таким чином, щоб забезпечити легку навігацію, надаючи зручний інтерфейс, який спрощує управління складними системами теплиць. Така філософія дизайну гарантує, що навіть користувачі з мінімальними технічними знаннями зможуть ефективно орієнтуватися в додатку і використовувати весь спектр його функцій.


2	ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1	Архітектура системи


Основою проекту є фреймворк .NET MAUI, який дотримується патерну MVVM для добре структурованої кодової бази. Розроблений на C# з використанням xaml, він взаємодіє з серверною частиною для ефективного управління даними. Ця комбінація, разом з IDE Visual Studio, забезпечує спрощений процес розробки комплексної системи догляду за теплицями та мікрофермами.


2.2	Програмна розробка системи


Основна програма використовує декілька сервісів, моделей, вьюмоделей та представлень, які перелічені нижче:
Сервіси в мобільному додатку відповідають за зв'язок з внутрішнім API і виконують CRUD-операції. Основні сервіси включають:
−	AuthService: Керує процесами автентифікації та авторизації користувачів, включаючи вхід, реєстрацію, оновлення інформації про користувача та вихід з системи.
−	SensorService: Обробляє операцію, пов'язану з датчиками, таку як отримання датчиків користувача.
−	UserService: Керує операціями, пов'язаними з користувачами, включаючи отримання всіх користувачів, створення, оновлення та видалення облікових записів користувачів.
−	GreenhouseService: Відповідає за операцію, пов'язану з теплицями, таку як отримання теплиць, пов'язаних з увімкненим користувачем.
−	NotificationService: Відповідає за операцію, пов'язану зі сповіщеннями користувачів, таку як отримання сповіщеннь.
Папка models визначає структури даних, що використовуються в додатку, забезпечуючи узгодженість і перевірку типів.
ViewModels відповідають за підготовку даних та обробку взаємодії з користувачем. 
Views представляють користувацький інтерфейс і включають різні сторінки, з якими взаємодіють користувачі. 
Програма використовує постачальників контексту для керування глобальними станами, такими як автентифікація та мовні налаштування:
−	AuthContext: Керує станом автентифікації користувача, включно з функціями входу і виходу з системи.
−	LanguageContext: Керує мовними налаштуваннями програми та надає методи для зміни мови.


2.3	Висновки


Виконавши лабораторну работу я отримав цінну інформацію про розробку мобільних додатків, зокрема:
−	Розуміння тонкощів інтеграції з внутрішніми API для виконання різних операцій, забезпечення узгодженості та надійності даних.
−	Вивчення ефективних стратегій управління станом в мобільному додатку для забезпечення чуйного та інтуїтивно зрозумілого користувацького досвіду.
−	Наголос на важливості створення функціонального та естетичного інтерфейсу, який би відповідав потребам кінцевих користувачів.
−	Розвиток навичок тестування та налагодження, щоб забезпечити безперебійну роботу програми на різних пристроях і в різних сценаріях.