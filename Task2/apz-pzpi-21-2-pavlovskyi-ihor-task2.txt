1	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою проекту є розробка високопродуктивного серверного компоненту для програмної системи, що забезпечує контроль та моніторинг тепличного середовища або середовища домашніх мікроферм. Основним завданням є реалізація сервера, який дозволить ефективно обробляти та зберігати дані, необхідні для моніторингу та управління різними параметрами теплиць. Опис прийнятих інженерних рішень буде включати розробку ефективної архітектури, забезпечення масштабованості системи, можливість інтеграції з іншими модулями управління теплицею, а також забезпечення високої надійності та безпеки обробки даних.


1.2	Моделювання програмної системи


Початковий етап роботи передбачає виконання концептуального моделювання предметної області, до якої відноситься система управління теплицями. При цьому важливо врахувати потреби користувачів у взаємодії з програмним комплексом. Використання програми повинно надавати користувачам можливість ефективно зберігати, редагувати, видаляти та фільтрувати інформацію, пов'язану з управлінням умовами в теплицях. Це означає створення стабільної та функціональної серверної складової системи управління теплицями, спрямованої на забезпечення простоти використання та максимальної функціональності в управлінні відповідними параметрами.


1.3	Аналіз інформаційних потреб користувачів


Для детального розуміння можливостей користувача, була розроблена UML-діаграма прецедентів (див. А.1).
За допомогою програмної системи, користувачі матимуть змогу:
Зареєструватися в системі:
−	Нові користувачі матимуть можливість легко створити особистий обліковий запис, ввівши необхідну інформацію (ім'я, контактні дані тощо) і вибравши унікальну комбінацію імені користувача та пароля.
Входити в систему при наявності вже створенного облікового записа:
−	Матимуть безпечний доступ до системи з використанням встановлених облікових даних.
Переглядати/редагувати інформацію в обліковому записі:
−	Користувачі зможуть переглядати та оновлювати інформацію про свій обліковий запис, включаючи особисті дані та контактну інформацію.
Моніторити та керувати датчиками:
−	Система надає чіткий огляд поточних показань датчиків для різних параметрів у декількох теплицях;
−	Користувачі матимуть можливість віддалено налаштовувати порогові значення та параметри датчиків;
−	Користувачі зможуть розширити діапазон контрольованих параметрів, додаючи нові датчики або видаляючи непотрібні.
Переглядати та створювати звіти:
−	Користувачі зможуть легко отримати доступ до створенних звітів, щоб отримати уявлення про ефективність своїх тепличних операцій;
−	Користувачі матимуть можливість створювати кастомізовані звіти, що відповідають їхнім конкретним інтересам. 
Отримувати екстрені сповіщення:
−	Система активно відстежує дані датчиків і негайно сповіщає користувачів електронною поштою про перевищення критичних порогових значень. Це дозволяє швидко втрутитися, щоб запобігти пошкодженню або втраті врожаю через екстремальні коливання температури, перебої в електропостачанні, несправності обладнання або інші надзвичайні ситуації.


2	ПРОЄКТУВАННЯ БАЗИ ДАНИХ


Для проєктування бази даних було розроблено ER діаграму (див. А.2). Усього база даних містить 5 таблиць та 15 неключових атрибутів, про які детальніше написано нижче.
Було виявлено, що один користувач може мати декілька різних теплиць, але кожна теплиця може належати лише одному користувачу.
Також зрозуміло, що одна теплиця може мати багато датчиків для вимірювання різних показників, але один датчик може належати лише одній теплиця.
Крім того, один датчик може мати кілька розкладів роботи, в свою чергу один розклад може належати лише одному датчику.
Також виявлено, що одна інформація з датчика може мати одне повідомлення про зміну показників та одне повідомлення може відноситися лише до однієї інформації з датчика.
Крім того, один датчик може мати багато інформації про його значення, збереженої в різні проміжки часу, але інформація про датчик може відноситися тільки до одного датчика.


3	РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ
3.1	Архітектура системи


Для розробки серверної складової нашої системи ми використовували діаграму розгортання (див. А.3), ключовий інструмент в мові UML. Цей графічний інструмент не лише формулює фізичну архітектуру системи, але й глибоко аналізує місцезнаходження та взаємодії між компонентами. Використання діаграми розгортання полегшує не лише проектування та аналіз системи, але й забезпечує оптимізацію фізичної структури. Цей підхід робить зрозумілішими взаємодії компонентів та сприяє раціональній розробці фізичної архітектури системи.
Паралельно з цим, була створена діаграма станів (див. А.4). Ця діаграма детально відображає можливі стани системи, події, що можуть спричинити переходи між ними, а також конкретні дії в кожному стані. Вона є не лише ефективним інструментом для аналізу та визначення поведінки системи, але й надійним засобом урахування можливих взаємодій та переходів під час взаємодії користувачів із системою.
Важливо відзначити, що цей підхід допомагає не лише створити ефективну архітектуру системи, але й покращити процеси розробки та взаємодії з користувачами.


3.2	Розробка сервера


Для розробки серверної частини нашого проекту було обрано ASP.NET Core Web API та мову програмування C#. Для зручності розробки використовувався Visual Studio.
Ця технологічна комбінація дозволила швидко і ефективно створити потужний сервер для проекту. ASP.NET Core Web API надав можливість створювати веб-сервіси, а мова C# відмінно підходить для програмування серверної логіки. Використання Visual Studio додатково спростило процес розробки, забезпечуючи зручну інтеграцію з ASP.NET Core. Також було використано ORM Entity Framework.


3.3	REST специфікація


Greenhouse:
GET api/greenhouses/ – отримати всі наявні теплиці;
POST api/greenhouses/ – додати нову теплицю;
GET api/greenhouses/{greenhouseId} – отримати потрібну теплицю за Id;
PUT api/greenhouses/{greenhouseId} –  змінити обрану за Id теплицю;
DELETE api/greenhouses/{greenhouseId} – видалити обрану за Id теплицю;
GET api/greenhouses/byUserId/{userId} – отримати всі теплиці одного користувача.
Notification:
GET api/notifications/ – отримати всі наявні повідомлення;
POST api/notifications/ – додати нове повідомлення;
GET api/notifications/{notificationId} – отримати потрібне повідомлення за Id;
PUT api/notifications/{notificationId} – змінити обране за Id повідомлення;
DELETE api/notifications/{notificationId} – видалити обране Id за повідомлення;
GET api/notifications/bySensorId/{sensorId} – отримати всі повідомлення, які відносяться до одного датчика.
Schedule:
GET api/schedules/ – отримати всі наявні розклади;
POST api/schedules/ – створити новий розклад;
GET api/schedules/{scheduleId} – отримати обраний за Id розклад;
PUT api/schedules/{scheduleId} – змінити обраний за Id розклад;
DELETE api/schedules/{scheduleId} – видалити обраний за Id розклад;
GET api/schedules/bySensorId/{sensorId} – отримати всі розклади, які пов’язані з одним датчиком.
Sensor:
GET api/sensors/ – отримати всі наявні датчики;
POST api/sensors/ – додати новий датчик;
GET api/sensors/{sensorId} – отримати обраний за Id датчик;
PUT api/sensors/{sensorId} – змінити обраний за Id датчик;
DELETE api/sensors/{sensorId} – видалити обраний за Id датчик;
GET api/sensors/byGreenhouseId/{greenhouseId} – отримати всі датчики, які пов’язані з однією теплицею.
SensorReading:
GET api/sensorsReadings/ – отримати всю інформацію з датчиків;
POST api/sensorsReadings/ – додати нову інформацію з датчика;
GET api/sensorsReadings/{sensorsReadingsId} – отримати обрану за Id інформацію з датчика;
PUT api/sensorsReadings/{sensorsReadingsId} – змінити обрану за Id інформацію з датчика;
DELETE api/sensorsReadings/{sensorsReadingsId} – видалити обрану за Id інформацію з датчика.
User:
GET api/users/ – отримати всіх наявних користувачів;
POST api/users/ – додати нового користувача;
GET api/users/{userId} – отримати обраного за Id користувача;
PUT api/users/{userId} – змінити обраного за Id користувача;
DELETE api/users/{userId} – видалити обраного за Id користувача;
POST api/users/login – вхід в систему;
POST api/users/logout – вихід з системи.