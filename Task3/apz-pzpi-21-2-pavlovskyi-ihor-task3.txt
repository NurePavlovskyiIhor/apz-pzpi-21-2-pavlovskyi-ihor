1	МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
1.1	Мета роботи


Метою роботи є розробка програмного забезпечення для IoT-пристрою, який буде використовуватися в системі догляду за теплицями та домашніми мікрофермами. Головні завдання включають в себе вибір та інтеграцію сенсорів, розробку програмного та апаратного забезпечення пристрою, а також встановлення взаємодії з іншими елементами системи. Робота також передбачає аналіз оптимальних інженерних рішень та побудову діаграм для наочного відображення структури та взаємодії всіх складових системи. У результаті планується створити функціональний пристрій, який забезпечить ефективний догляд за теплицями в автоматизованому режимі.

1.2	Моделювання програмної системи


Для вивчення можливостей було створено UML діаграму прецедентів (див. А.1), яка відображає важливі аспекти функціональності пристрою, підкреслюючи його здатність до обчислювальних завдань та взаємодії з оточуючим середовищем. На діаграмі відображено, що пристрій володіє рядом функцій: від перевірки відповідності користувача до взаємодії з серверною частиною через функції POST та GET запитів. Також реалізована можливість отримання часу в універсальному форматі UTC, що важливо для синхронізації подій та спеціальний механізм для повідомлення користувача про зміну показників.
Розглянемо повний цикл функціонування системи, який включає в себе не лише базові кроки, але й деякі додаткові аспекти:
1. Користувач, при першому використанні системи, повинен локально підключитися до контролера. Це створює можливість налаштування основних параметрів та взаємодії з системою безпосередньо.
2. У подальших випадках система автоматично звертається до серверної частини для отримання актуальних даних та зберігання їх власній пам'яті, що робить її більш гнучкою та адаптованою до змінних умов.
3. Розпочинається отримання часу в форматі UTC.
4. Графік знаття показників з сенсорів визначається з огляду на індивідуальні налаштування користувача.
5. Якщо поточний час відповідає часу зняття показників, система перевіряє їх на відповідність виставленному користувачем дозволеному проміжку значень.
6. Якщо показники вологості та температури виходять за рамки, встановлені користувачем, система відправляє повідомлення. Весь цей процес обробки даних подано на діаграмі активності (див. А.2 та А.3).
7. Цей цикл повторюється, доки ІоТ систему не відключено від живлення.


1.3	Взаємодія між частинами системи


Програмне забезпечення взаємодіє з іншими частинами системи шляхом використання серверної частини, яка була розширена додатковими методами
для забезпечення більшої функціональності. Додано методи для отримання та оновлення інформації про мережу, до якої підключено сенсор. Це дозволяє системі ефективно взаємодіяти з іншими пристроями в мережі та підтримувати актуальні дані про їх стан.
Для більш детального розгляду взаємодії програмного забезпечення з серверною частиною та послідовності дій була створена діаграма взаємодії на основі діаграми активності (див. А.2). На цій діаграмі можна виявити деталі взаємодії програми та серверної частини, що дозволяє краще зрозуміти, як відбувається обробка даних та обмін інформацією між компонентами системи.


2	ПРОГРАМНА РЕАЛІЗАЦІЯ
2.1	Архітектура системи


Початок розробки програмного забезпечення для IoT-пристрою відбувся на мові програмування C++ у віртуальному середовищі симуляції Wokwi. Для емуляції фізичної системи використовувався мікроконтроллер ESP32, обладнаний можливістю підключення до мережі та виходу в інтернет — це важливо для взаємодії з серверною частиною. В комплекті до пристрою входив сенсор DHT22 для вимірювання вологості та температури.
Цей підхід дозволяє не лише програмно тестувати функціональність пристрою, але і ефективно моделює його роботу в умовах, що найбільше наближені до реальних. Використання мікроконтроллера ESP32 гарантує стабільне з'єднання з мережею та доступ до інтернету, що є ключовим для ефективної роботи з серверною частиною.


2.2	Програмна розробка системи


Перед початком написання коду було створено схему для фізичного розміщення частин системи (див. А.5).
В головному файлі програми використовуються такі бібліотеки (див. Б.1, рядки 1-7):
− WiFi.h: Для роботи з Wi-Fi модулем ESP32 і підключення до бездротової мережі.
− HTTPClient.h: Взаємодія з HTTP-серверами.
− ArduinoJson.h: Робота з форматом JSON на платформі Arduino.
− DHT.h: Взаємодія з датчиками температури та вологості.
Файл «wifi-scan.ino» реалізує систему моніторингу теплиці на основі Wi-Fi. Вона підключається до заданої мережі WiFi та ініціалізує різні компоненти, включаючи датчики та конфігурацію часу. Основні функціональні можливості включають:
− Підключення до WiFi: Підключається до вказаної мережі WiFi.
− Синхронізація часу: Синхронізує час із сервером NTP.
− Аутентифікація користувача: Аутентифікація користувача та перевірка облікових даних на віддаленому сервері.
− Ініціалізація теплиці: Ініціалізує систему теплиці, отримуючи дані датчиків із сервера.
− Моніторинг датчиків: Здійснює моніторинг датчиків (температури та вологості) і повідомляє про відхилення, якщо система керування увімкнена.
− Звітність даних: Звітує про показання датчиків та сповіщення на віддалений сервер на основі певних умов.
«InitUserGreenhouse.h» містить функцію автентифікації користувача шляхом надсилання запиту на вхід на віддалений сервер і перевірки облікових даних користувача. 
«Sensor.h» визначає структуру датчика, яка включає методи перевірки стану датчика та відправлення повідомлення користувачу за необхідності. Використовує розклад для визначення періодів активного моніторингу та зв'язується з віддаленим сервером для публікації показань датчика та сповіщень.
«Greenhouse.h» визначає структуру Greenhouse, яка відповідає за ініціалізацію датчиків шляхом отримання їхньої конфігурації з віддаленого сервера. Вона містить список датчиків, які контролюються в теплиці.
«Schedule.h» визначає структуру Schedule і містить статичний метод для отримання розкладу моніторингу для певного датчика з віддаленого сервера. Розклади визначають активні періоди для моніторингу датчиків.
«Notification.h» містить функції для надсилання показань датчиків та сповіщень на віддалений сервер. Він форматує дані у JSON і обробляє HTTP-зв'язок. Сповіщення генеруються, коли показники датчика відхиляються від налаштованого діапазону.


2.3	Висновки


Під час виконання цієї лабораторної роботи було розроблене програмне забезпечення для IoT-пристрою, який відіграє ключову роль у системі моніторингу теплиць та домашніх мікроферм. У межах проекту було докладно розглянуто архітектуру системи, представлено програмну реалізацію та описано фізичну схему, включаючи взаємодію з іншими компонентами системи. Звіт доповнено створенням діаграм, які наочно відображують структуру та взаємодію всіх компонентів системи, надаючи більш повний огляд розробленого рішення. Програмна система дозволяє забезпечити ефективний та надійний механізм догляду за теплицєю або мікрофермою, забезпечуючи власникам необхідну інформацію та контроль над умовами.
